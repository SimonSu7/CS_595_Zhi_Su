{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red200\green20\blue201;\red255\green255\blue255;\red180\green36\blue25;
\red0\green0\blue0;\red47\green180\blue29;\red64\green11\blue217;\red193\green101\blue28;}
{\*\expandedcolortbl;;\cssrgb\c83396\c23075\c82664;\csgray\c100000;\cssrgb\c76409\c21698\c12524;
\csgray\c0;\cssrgb\c20238\c73898\c14947;\cssrgb\c32308\c18668\c88227;\cssrgb\c80553\c47366\c13835;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb3 \CocoaLigature0 #include \cf4 <petscksp.h>\cf5 \
\cf6 int\cf5  main(\cf6 int\cf5  argc, \cf6 char\cf5  **args) \{\
    Vec            x,b,u;\
    PetscReal      norm;\
    PetscScalar    one=\cf4 1.0\cf5 ,negone=-\cf4 1.0\cf5 ,matvalue[\cf4 3\cf5 ];\
    KSP            ksp;\
    PC             pc;\
    Mat            A;\
    PetscInt       i,n=\cf4 100\cf5 ,colum[\cf4 3\cf5 ],its;\
    PetscMPIInt    rank,size;\
\
    PetscInitialize(&argc,&args,(\cf6 char\cf5  *)\cf4 0\cf5 ,\cf4 NULL\cf5 );\
    MPI_Comm_rank(PETSC_COMM_WORLD,&rank);\
    MPI_Comm_size(PETSC_COMM_WORLD,&size);\
\
    MatCreate(PETSC_COMM_WORLD,&A);\
    MatSetSizes(A,PETSC_DECIDE,PETSC_DECIDE,n,n);\
    MatSetFromOptions(A);\
    MatSetUp(A);\
    \cf7 //built matrix A for sparse form//\cf5 \
        \cf8 for\cf5  (i=\cf4 0\cf5 ; i<n; i++) \{\
        \cf8 if\cf5  (i==\cf4 0\cf5 ) \{\
            colum[\cf4 0\cf5 ]=\cf4 0\cf5 ;\
            colum[\cf4 1\cf5 ]=\cf4 1\cf5 ;\
            matvalue[\cf4 0\cf5 ]=\cf4 2.0\cf5 ;\
            matvalue[\cf4 1\cf5 ]=-\cf4 1.0\cf5 ;\
            MatSetValues(A,\cf4 1\cf5 ,&i,\cf4 2\cf5 ,colum,matvalue,INSERT_VALUES);\
        \}\
        \cf8 else\cf5  \cf8 if\cf5  (i>\cf4 0\cf5 &&i<n-\cf4 1\cf5 )\{\
            matvalue[\cf4 0\cf5 ]=-\cf4 1.0\cf5 ;\
            matvalue[\cf4 1\cf5 ]=\cf4 2.0\cf5 ;\
            matvalue[\cf4 2\cf5 ]=-\cf4 1.0\cf5 ;\
            colum[\cf4 0\cf5 ]=i-\cf4 1\cf5 ;\
            colum[\cf4 1\cf5 ]=i;\
            colum[\cf4 2\cf5 ]=i+\cf4 1\cf5 ;\
            MatSetValues(A,\cf4 1\cf5 ,&i,\cf4 3\cf5 ,colum,matvalue,INSERT_VALUES);\
        \}\
        \cf8 else\cf5  \cf8 if\cf5  (i==n-\cf4 1\cf5 )\{\
            colum[\cf4 0\cf5 ]=i-\cf4 1\cf5 ;\
            colum[\cf4 1\cf5 ]=i;\
            matvalue[\cf4 0\cf5 ]=-\cf4 1.0\cf5 ;\
            matvalue[\cf4 1\cf5 ]=\cf4 2.0\cf5 ;\
            matvalue[\cf4 2\cf5 ]=-\cf4 1.0\cf5 ;\
            MatSetValues(A,\cf4 1\cf5 ,&i,\cf4 2\cf5 ,colum,matvalue,INSERT_VALUES);\
        \}\
    \}\
    MatAssemblyBegin(A,MAT_FINAL_ASSEMBLY);\
    MatAssemblyEnd(A,MAT_FINAL_ASSEMBLY);\
    \cf7 //build RHS B//\cf5 \
    VecCreate(PETSC_COMM_WORLD,&x);\
    VecSetSizes(x,PETSC_DECIDE,n);\
    VecSetFromOptions(x);\
    VecDuplicate(x,&b);\
    VecDuplicate(x,&u);\
    VecSet(b,one);\
    \cf7 //KSP\cf5 \
    KSPCreate(PETSC_COMM_WORLD, &ksp);\
    KSPSetOperators(ksp,A,A);\
    KSPGetPC(ksp,&pc);\
    PCSetType(pc,PCJACOBI);\
    KSPSetTolerances(ksp,\cf4 1.e-5\cf5 ,PETSC_DEFAULT,PETSC_DEFAULT,PETSC_DEFAULT);\
    KSPSetFromOptions(ksp);\
    KSPSolve(ksp,b,x);\
    KSPView(ksp,PETSC_VIEWER_STDOUT_WORLD);\
    \cf7 //check ||AX-b||\cf5 \
    MatMult(A,x,u);\
    VecAXPY(u,negone,b);\
    VecNorm(u,NORM_2,&norm);\
    KSPGetIterationNumber(ksp,&its);\
    PetscPrintf(PETSC_COMM_WORLD,\cf4 "Norm of error \cf2 %g\cf4 , Iterations \cf2 %D\\n\cf4 "\cf5 ,norm,its);\
    VecDestroy(&x);\
    VecDestroy(&b);\
    VecDestroy(&u);\
    MatDestroy(&A);\
    KSPDestroy(&ksp);\
    PetscFinalize();\
    \cf8 return\cf5  \cf4 0\cf5 ;\
\}\
}